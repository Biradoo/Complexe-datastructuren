@startuml
class Main {
+main()
}

class Console {
- MyHashMap<String, Station> stations
- MyGraph<String> tracks
- InputReader inputReader
- void showMinimumCostSpanningTree()
- void showShortestRouteBetweenStations()
- MyArrayList<Station> filterStationByType(String)
- MyArrayList<Station> findMatchingStations(String)
}

class Station {
}

class Track {
}


class StationsCSVReader {
+ {static} MyHashMap<String, Station> readCSV(String)
}

class TracksCSVReader {
+ {static} MyGraph<String> readCSV(String)
}

class InputReader {
- Scanner scanner
+ String readString()
+ int readInt()
}
class MyHashMap {
- Bucket<K, V>[] buckets;
+ MyArrayList<K> getKeys()
+ void put(K, V)
+ boolean contains(K)
+ V remove(K)
}

class MyArrayList {
- Object[] elements
+ void addLast(V)
+ simpleSort(Comparator<V>)
+ boolean contains(V)
+ V get(int)
+ int size()
}

class MyPriorityQueue {
- MyMinHeap<V> heap
+ void enqueue(V)
+ V dequeue()
+ V peek()
}

class MyMinHeap {
- V[] heap
+ void enqueue(V)
+ V dequeue()
+ V peek()
}

class MyGraph {
- MyHashMap<V, SaxList<DirectedEdge<V>>> adjacencyList
- MyHashMap<V, Double> distances
+ void addEdge(V, V, double)
+ void addEdgeBidirectional(V, V, double)
+ SaxList<DirectedEdge<V>> getEdges(V)
+ SaxList<DirectedEdge<V>> shortestPathAStar(V, V, Estimator<V>)
+ MyGraph<V> minimumCostSpanningTree()
}

class HeuristicEstimator {
+ double estimate(V, V)
}

class Coordinate {
+ {static} haversineDistance(Coordinate, Coordinate)
}

Main --> Console
Console --> StationsCSVReader
Console --> TracksCSVReader
Console --> InputReader
Console --> Station
Console --> Track
Console --> MyGraph
StationsCSVReader --> Station
TracksCSVReader --> Track
TracksCSVReader --> MyGraph
MyGraph --> HeuristicEstimator
MyGraph --> MyPriorityQueue
MyGraph --> MyHashMap
MyHashMap --> MyArrayList
InputReader --> MyArrayList
MyArrayList --> MyGraph
MyPriorityQueue --> MyMinHeap
HeuristicEstimator --> Coordinate
@enduml